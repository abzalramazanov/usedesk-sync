// index_with_history.js
import express from "express";
import fetch from "node-fetch";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import fs from "fs/promises";
import { logUnanswered, isUnrecognizedResponse } from "./log_unanswered.js";
import { faq } from "./faq.js";

dotenv.config();

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 10000;
const USEDESK_API_TOKEN = process.env.USEDESK_API_TOKEN;
const USEDESK_USER_ID = process.env.USEDESK_USER_ID;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const CLIENT_ID_LIMITED = "175888649";
const HISTORY_FILE = "./chat_history.json";
const HISTORY_TTL_MS = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤

const recentGreetings = {}; // key: ticket_id, value: timestamp

function buildExtendedPrompt(faq, userMessage, history = []) {
  let block = "üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤:\n";
  if (Array.isArray(faq)) {
    faq.forEach((item) => {
      block += "Q: " + item.question + "\nA: " + item.answer + "\n\n";
      if (item.aliases && item.aliases.length > 0) {
        item.aliases.forEach((alias) => {
          block += "Q: " + alias + "\nA: " + item.answer + "\n\n";
        });
      }
    });
  }
  const chatHistory = history.length > 0 ? `\n–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n${history.map(h => h.text).join("\n")}` : "";
  block += `${chatHistory}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: \"${userMessage}\"\n–û—Ç–≤–µ—Ç:`;
  return block;
}

async function getChatHistory(chatId) {
  let data = {};
  try {
    const file = await fs.readFile(HISTORY_FILE, "utf-8");
    data = JSON.parse(file);
  } catch (_) {}
  const now = Date.now();
  const history = (data[chatId] || []).filter(entry => now - entry.timestamp < HISTORY_TTL_MS);
  data[chatId] = history;
  await fs.writeFile(HISTORY_FILE, JSON.stringify(data, null, 2));
  return history.map(entry => entry.text);
}

async function appendToHistory(chatId, message) {
  let data = {};
  try {
    const file = await fs.readFile(HISTORY_FILE, "utf-8");
    data = JSON.parse(file);
  } catch (_) {}
  if (!data[chatId]) data[chatId] = [];
  data[chatId].push({ text: message, timestamp: Date.now() });
  if (data[chatId].length > 10) {
    data[chatId] = data[chatId].slice(-10);
  }
  await fs.writeFile(HISTORY_FILE, JSON.stringify(data, null, 2));
  console.log(`üíæ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: [${chatId}] ‚Üí ${message}`);
}

app.post("/", async (req, res) => {
  const data = req.body;
  if (!data || !data.text || data.from !== "client") return res.sendStatus(200);
  if (data.client_id != CLIENT_ID_LIMITED) return res.sendStatus(200);

  const chat_id = data.chat_id;
  const message = data.text;
  const ticket_id = data.ticket?.id;
  const ticket_status = data.ticket?.status_id;
  const client_id = data.client?.id;
  const client_name = data.client?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  console.log("üöÄ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);

  await appendToHistory(chat_id, `–ö–ª–∏–µ–Ω—Ç: ${message}`);
  const history = await getChatHistory(chat_id);

  const systemPrompt = `–¢—ã ‚Äî –∞–≥–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ Payda –≠–î–û. –û—Ç–≤–µ—á–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å. –ù–∏–∂–µ ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:`;
  const fullPrompt = systemPrompt + "\n\n" + buildExtendedPrompt(faq, message, history);

  let aiAnswer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç üòÖ";
  let isUnrecognized = false;

  try {
    const geminiRes = await fetch(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + GEMINI_API_KEY,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents: [{ role: "user", parts: [{ text: fullPrompt }] }] })
      }
    );
    const geminiData = await geminiRes.json();
    aiAnswer = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || aiAnswer;

    const lastGreet = recentGreetings[ticket_id];
    const now = Date.now();
    if (aiAnswer.toLowerCase().startsWith("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ") && lastGreet && now - lastGreet < 86400000) {
      aiAnswer = aiAnswer.replace(/^–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ[!,.\s]*/i, "").trimStart();
    } else if (aiAnswer.toLowerCase().startsWith("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ")) {
      recentGreetings[ticket_id] = now;
    }

    console.log("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç Gemini:", aiAnswer);

    if (isUnrecognizedResponse(aiAnswer)) {
      isUnrecognized = true;
      logUnanswered(message, data.client_id);
      aiAnswer = "–ö —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ üôå";
      await fetch("https://api.usedesk.ru/chat/changeAssignee", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          api_token: USEDESK_API_TOKEN,
          chat_id: chat_id,
          user_id: USEDESK_USER_ID
        })
      });
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini:", err);
  }

  if (ticket_status === 3) {
    return res.sendStatus(200);
  }

  try {
    await fetch("https://api.usedesk.ru/chat/sendMessage", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        api_token: USEDESK_API_TOKEN,
        chat_id,
        user_id: USEDESK_USER_ID,
        text: aiAnswer
      })
    });
    await appendToHistory(chat_id, `–ê–≥–µ–Ω—Ç: ${aiAnswer}`);
    console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Usedesk:", err);
  }

  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Å –ò–ò –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω üöÄ (–ø–æ—Ä—Ç ${PORT})`);
});
