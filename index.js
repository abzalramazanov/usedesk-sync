
import express from "express";
import fetch from "node-fetch";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import fs from "fs";
import fsp from "fs/promises";
import { logUnanswered, isUnrecognizedResponse } from "./log_unanswered.js";
import { faq } from "./faq.js";

dotenv.config();

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 10000;
const USEDESK_API_TOKEN = process.env.USEDESK_API_TOKEN;
const USEDESK_USER_ID = process.env.USEDESK_USER_ID;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

const HISTORY_FILE = "/mnt/data/chat_history.json";
const HISTORY_TTL_MS = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤

if (!fs.existsSync(HISTORY_FILE)) {
  fs.writeFileSync(HISTORY_FILE, "{}");
  console.log("üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω –Ω–∞ –¥–∏—Å–∫–µ Render (/mnt/data)");
}

const recentGreetings = {};

function buildExtendedPrompt(faq, userMessage, history = []) {
  let block = "üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤:\n";
  if (Array.isArray(faq)) {
    faq.forEach((item) => {
      block += "Q: " + item.question + "\nA: " + item.answer + "\n\n";
      if (item.aliases && item.aliases.length > 0) {
        item.aliases.forEach((alias) => {
          block += "Q: " + alias + "\nA: " + item.answer + "\n\n";
        });
      }
    });
  }
  const chatHistory = history.length > 0 ? `\n–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n${history.map(h => h.text).join("\n")}` : "";
  block += `${chatHistory}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: "${userMessage}"\n–û—Ç–≤–µ—Ç:`;
  return block;
}

async function getChatHistory(chatId) {
  let data = {};
  try {
    const file = await fsp.readFile(HISTORY_FILE, "utf-8");
    data = JSON.parse(file);
  } catch (_) {}
  const now = Date.now();
  const history = (data[chatId] || []).filter(entry => now - entry.timestamp < HISTORY_TTL_MS);
  data[chatId] = history;
  await fsp.writeFile(HISTORY_FILE, JSON.stringify(data, null, 2));
  return history.map(entry => entry.text);
}

async function appendToHistory(chatId, message) {
  let data = {};
  try {
    const file = await fsp.readFile(HISTORY_FILE, "utf-8");
    data = JSON.parse(file);
  } catch (_) {}
  if (!data[chatId]) data[chatId] = [];
  data[chatId].push({ text: message, timestamp: Date.now() });
  if (data[chatId].length > 10) {
    data[chatId] = data[chatId].slice(-10);
  }
  await fsp.writeFile(HISTORY_FILE, JSON.stringify(data, null, 2));
  console.log(`üíæ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: [${chatId}] ‚Üí ${message}`);
}

function isAskingClarification(answer) {
  const clarifiers = ["—É—Ç–æ—á–Ω–∏—Ç–µ","—á—Ç–æ –∏–º–µ–Ω–Ω–æ","–º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å","–Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª","—É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞","–º–æ–≥–ª–∏ –±—ã –ø–æ—è—Å–Ω–∏—Ç—å","—á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å","–∫–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å","—á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç","–æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ","–Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ","—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"];
  return clarifiers.some(word => answer.toLowerCase().includes(word));
}

async function updateTicketStatus(ticketId, status, clientName) {
  try {
    const response = await fetch("https://api.usedesk.ru/update/ticket", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ api_token: USEDESK_API_TOKEN, ticket_id: ticketId, status: String(status) })
    });
    await response.json();
    console.log(`üéØ –ö–ª–∏–µ–Ω—Ç: ${clientName} | –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #${ticketId} ‚Üí ${status}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞:", err);
  }
}

app.post("/", async (req, res) => {
  const data = req.body;
  console.log("üî• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:", JSON.stringify(data, null, 2));

  if (!data || data.from !== "client") {
    console.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.");
    return res.sendStatus(200);
  }

  const chat_id = data.chat_id;
  const message = data.text || "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]";
  const ticket_id = data.ticket?.id;
  const ticket_status = data.ticket?.status_id;
  const client_id = data.client?.id;
  const client_name = data.client?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

  await appendToHistory(chat_id, `–ö–ª–∏–µ–Ω—Ç: ${message}`);
  const history = await getChatHistory(chat_id);

  const systemPrompt = `–¢—ã ‚Äî –∞–≥–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ Payda –≠–î–û. –û—Ç–≤–µ—á–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å. –ù–∏–∂–µ ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ...`;
  const fullPrompt = systemPrompt + "\n\n" + buildExtendedPrompt(faq, message, history);

  let aiAnswer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç üòÖ";
  let isUnrecognized = false;

  try {
    const geminiRes = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + GEMINI_API_KEY, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ contents: [{ role: "user", parts: [{ text: fullPrompt }] }] })
    });
    const geminiData = await geminiRes.json();
    aiAnswer = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || aiAnswer;

    const lastGreet = recentGreetings[ticket_id];
    const now = Date.now();
    if (aiAnswer.toLowerCase().startsWith("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ") && lastGreet && now - lastGreet < 86400000) {
      aiAnswer = aiAnswer.replace(/^–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ[!,.\s]*/i, "").trimStart();
    } else if (aiAnswer.toLowerCase().startsWith("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ")) {
      recentGreetings[ticket_id] = now;
    }

    console.log("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç Gemini:", aiAnswer);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini:", err);
  }

  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Å –ò–ò –∏ Render-–¥–∏—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω üöÄ (–ø–æ—Ä—Ç ${PORT})`);
});
