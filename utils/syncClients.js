const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const creds = require('../credentials.json');

// üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const TIMESTAMP_FILE = path.join(__dirname, '..', 'last_timestamp.txt');
const DEFAULT_TIMESTAMP = 1748512200000; // 2025-05-29 12:30:00 Asia/Almaty
const SHEET_ID = '1VNxBh-zd5r8livxK--rjgPk-E0o_fBtZQALqRKoYiY0';

async function getLastTimestamp() {
  try {
    if (fs.existsSync(TIMESTAMP_FILE)) {
      const ts = parseInt(fs.readFileSync(TIMESTAMP_FILE, 'utf8').trim());
      console.log(`üïí –ü—Ä–æ—á–∏—Ç–∞–Ω timestamp –∏–∑ —Ñ–∞–π–ª–∞: ${ts}`);
      return ts;
    } else {
      console.log(`üìÅ –§–∞–π–ª timestamp –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º default: ${DEFAULT_TIMESTAMP}`);
      return DEFAULT_TIMESTAMP;
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è timestamp:', err.message);
    return DEFAULT_TIMESTAMP;
  }
}

async function saveLastTimestamp(timestamp) {
  try {
    fs.writeFileSync(TIMESTAMP_FILE, timestamp.toString());
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω timestamp: ${timestamp}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ timestamp:', err.message);
  }
}

async function syncClients() {
  console.log('üöÄ syncClients —Å—Ç–∞—Ä—Ç—É–µ—Ç...');
  console.log('üåê USEDESK_API_URL:', process.env.USEDESK_API_URL);
  console.log('üîê USEDESK_TOKEN:', process.env.USEDESK_TOKEN ? '–µ—Å—Ç—å' : '–ù–ï–¢');
  console.log('üìÑ Google Sheet ID:', SHEET_ID);

  const doc = new GoogleSpreadsheet(SHEET_ID);

  try {
    await doc.useServiceAccountAuth(creds);
    await doc.loadInfo();
    console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets –ø—Ä–æ—à–ª–∞ ‚Üí –î–æ–∫—É–º–µ–Ω—Ç: ${doc.title}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets:', err.message);
    return;
  }

  const sheet = doc.sheetsByIndex[0];
  let rows = [];

  try {
    rows = await sheet.getRows();
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${rows.length}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫:', err.message);
    return;
  }

  const lastTimestamp = await getLastTimestamp();

  const newRows = rows.filter((row) => {
    const created = parseInt(row.created);
    if (isNaN(created)) {
      console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º created: ${row.created}`);
      return false;
    }
    return created > lastTimestamp;
  });

  console.log(`üìå –ù–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ ${lastTimestamp}: ${newRows.length}`);

  if (newRows.length === 0) {
    console.log('‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º.');
    return;
  }

  let createdCount = 0;
  let skippedCount = 0;
  let latestTimestamp = lastTimestamp;

  for (const row of newRows) {
    const phone = String(row.phone_number || '').replace(/\D/g, '');
    const name = '–ò–ò–ù ' + (row.bin_iin || '');
    const created = parseInt(row.created);

    if (!phone || !row.bin_iin || isNaN(created)) {
      console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞. phone: ${phone}, bin_iin: ${row.bin_iin}, created: ${row.created}`);
      skippedCount++;
      continue;
    }

    console.log(`üì§ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: ${name}, ${phone}`);

    try {
      const response = await axios.post(process.env.USEDESK_API_URL, {
        api_token: process.env.USEDESK_TOKEN,
        phone,
        name,
      });

      const clientId = response.data.client_id || '‚ùì unknown';
      console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω ‚Üí client_id: ${clientId}`);

      try {
        const ticketResp = await axios.post('https://api.usedesk.ru/create/ticket', {
          api_token: process.env.USEDESK_TOKEN,
          tag: 'OscarSigmaRegistration',
          message: 'new registration :D',
          subject: 'OscarSigmaRegistration',
          channel_id: '63818',
          from: 'client',
          client_id: clientId,
        });

        console.log(`üí¨ –¢–∏–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Üí —Å—Ç–∞—Ç—É—Å ${ticketResp.status}`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–∫–µ—Ç–∞ client_id=${clientId}:`, err.response?.data || err.message);
      }

      createdCount++;
      if (created > latestTimestamp) {
        latestTimestamp = created;
      }
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (${name}):`, err.response?.data || err.message);
      skippedCount++;
    }
  }

  console.log(`üìà –ì–æ—Ç–æ–≤–æ. –°–æ–∑–¥–∞–Ω–æ: ${createdCount}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);

  if (createdCount > 0) {
    await saveLastTimestamp(latestTimestamp);
  } else {
    console.log('‚ÑπÔ∏è timestamp –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω ‚Äî –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.');
  }
}

syncClients();
