import express from "express";
import fetch from "node-fetch";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import { logUnanswered, isUnrecognizedResponse } from "./log_unanswered.js";
import { faq } from "./faq.js";
dotenv.config();

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 10000;
const USEDESK_API_TOKEN = process.env.USEDESK_API_TOKEN;
const USEDESK_USER_ID = process.env.USEDESK_USER_ID;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const CLIENT_ID_LIMITED = "175888649";

console.log("\nüß™ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
console.log("USEDESK_API_TOKEN:", USEDESK_API_TOKEN ? "‚úÖ" : "‚ùå NOT SET");
console.log("USEDESK_USER_ID:", USEDESK_USER_ID ? "‚úÖ" : "‚ùå NOT SET");
console.log("GEMINI_API_KEY:", GEMINI_API_KEY ? "‚úÖ" : "‚ùå NOT SET");
console.log("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ FAQ:", Array.isArray(faq) ? faq.length : "‚ö†Ô∏è –ù–µ –º–∞—Å—Å–∏–≤");

const systemPrompt = `–¢—ã ‚Äî –∞–≥–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ Payda –≠–î–û. –û—Ç–≤–µ—á–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å. –ù–∏–∂–µ ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —É—Å–ª—É–≥–∏? ‚Äî 500 —Ç–≥ –≤ –º–µ—Å—è—Ü.
2. –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞? ‚Äî –ù–∞–ø–∏—à–∏—Ç–µ –≤ –Ø–Ω–¥–µ–∫—Å–ü—Ä–æ: ¬´–•–æ—á—É –ø–µ—Ä–µ–π—Ç–∏ –≤ Payda –≠–î–û¬ª –∏ —É–∫–∞–∂–∏—Ç–µ –ò–ò–ù.
3. –ì–¥–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã? ‚Äî –ù–∞ https://taxi.edo.kz.
4. –ö–æ–≥–¥–∞ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã? ‚Äî –° 8 –ø–æ 15 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.
5. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –ø—Ä–∏—à–ª–∏? ‚Äî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å –≤ –Ø–Ω–¥–µ–∫—Å–ü—Ä–æ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.
6. –ö–∞–∫ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –º–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä? ‚Äî –ù–∞–ø–∏—à–∏—Ç–µ –≤ –Ø–Ω–¥–µ–∫—Å–ü—Ä–æ.
7. –ß—Ç–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–∞ —Å–º—Å? ‚Äî –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
8. –ö–∞–∫ —É–∑–Ω–∞—Ç—å, –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã? ‚Äî –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–î–æ–∫—É–º–µ–Ω—Ç—ã¬ª.
9. –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å? ‚Äî –ß–µ—Ä–µ–∑ Kaspi, –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.
10. –ö—Ç–æ –≤–∏–¥–∏—Ç –º–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã? ‚Äî –¢–æ–ª—å–∫–æ –≤—ã –∏ –≤–∞—à –ø—Ä–æ–≤–∞–π–¥–µ—Ä.

–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–µ –Ω–∏–∂–µ. –ï—Å–ª–∏ –∏ —Ç–∞–º –Ω–∏—á–µ–≥–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.`;

function buildExtendedPrompt(faq, userMessage) {
  let block = "üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤:\n";
  if (Array.isArray(faq)) {
    faq.forEach((item, i) => {
      block += "Q: " + item.question + "\nA: " + item.answer + "\n\n";
      if (item.aliases && item.aliases.length > 0) {
        item.aliases.forEach(alias => {
          block += "Q: " + alias + "\nA: " + item.answer + "\n\n";
        });
      }
    });
  }
  block += "–ï—Å–ª–∏ –∏ —Å—Ä–µ–¥–∏ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: \"" + userMessage + "\"\n–û—Ç–≤–µ—Ç:";
  return block;
}

async function updateTicketStatus(ticketId, status, clientName) {
  try {
    const response = await fetch("https://api.usedesk.ru/update/ticket", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        api_token: USEDESK_API_TOKEN,
        ticket_id: ticketId,
        status: String(status) // <== —Ç—É—Ç –∫–ª—é—á 'status', –Ω–µ 'status_id'
      })
    });
    const result = await response.json();
    console.log(`üéØ –ö–ª–∏–µ–Ω—Ç: ${clientName} | –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #${ticketId} ‚Üí ${status}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞:", err);
  }
}

function isAskingClarification(answer) {
  const clarifiers = [ "—É—Ç–æ—á–Ω–∏—Ç–µ",  "—á—Ç–æ –∏–º–µ–Ω–Ω–æ", "–º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å", "–Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª", "—É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–º–æ–≥–ª–∏ –±—ã –ø–æ—è—Å–Ω–∏—Ç—å", "–Ω–µ –º–æ–≥–ª–∏ –±—ã —É—Ç–æ—á–Ω–∏—Ç—å", "—á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", "–º–æ–≥–ª–∏ –±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–Ω–µ —Å–æ–≤—Å–µ–º —è—Å–Ω–æ", "–Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "—á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"];
  return clarifiers.some(word => answer.toLowerCase().includes(word));
}

app.post("/", async (req, res) => {
  const data = req.body;
  if (!data || !data.text || data.from !== "client") return res.sendStatus(200);
  if (data.client_id != CLIENT_ID_LIMITED) return res.sendStatus(200);
  if (data.ticket?.assignee_id !== null || data.ticket?.group !== null) {
    return res.sendStatus(200);
  }

  const chat_id = data.chat_id;
  const message = data.text;
  const ticket_id = data.ticket?.id;
  const client_name = data.client?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  console.log("üöÄ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);

  const fullPrompt = systemPrompt + "\n\n" + buildExtendedPrompt(faq, message);
  let aiAnswer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç üòÖ";
  let isUnrecognized = false;

  try {
    const geminiRes = await fetch(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + GEMINI_API_KEY,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [
            { role: "user", parts: [{ text: fullPrompt }] }
          ]
        })
      }
    );
    const geminiData = await geminiRes.json();
    aiAnswer = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || aiAnswer;
    console.log("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç Gemini:", aiAnswer);

    if (isUnrecognizedResponse(aiAnswer)) {
      isUnrecognized = true;
      logUnanswered(message, data.client_id);
      aiAnswer = "–ö —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ üôå";

      try {
        await fetch("https://api.usedesk.ru/chat/changeAssignee", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            api_token: USEDESK_API_TOKEN,
            chat_id: chat_id,
            user_id: 293758
          })
        });
        console.log(`üîÑ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–ª–∏–µ–Ω—Ç—É: ${client_name}`);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", err);
      }
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini:", err);
  }

  try {
    await fetch("https://api.usedesk.ru/chat/sendMessage", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        api_token: USEDESK_API_TOKEN,
        chat_id,
        user_id: USEDESK_USER_ID,
        text: aiAnswer
      })
    });
    console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Usedesk:", err);
  }

  if (ticket_id && !isUnrecognized) {
    const status = isAskingClarification(aiAnswer) ? 6 : 2;
    await updateTicketStatus(ticket_id, status, client_name);
  }

  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Å –ò–ò –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç üöÄ (–ø–æ—Ä—Ç ${PORT})`);
});
