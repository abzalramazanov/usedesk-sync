// index_with_history.js
import express from "express";
import fetch from "node-fetch";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import fs from "fs";
import fsp from "fs/promises";
import { logUnanswered, isUnrecognizedResponse } from "./log_unanswered.js";
import { faq } from "./faq.js";

dotenv.config();

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 10000;
const USEDESK_API_TOKEN = process.env.USEDESK_API_TOKEN;
const USEDESK_USER_ID = process.env.USEDESK_USER_ID;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

const HISTORY_FILE = "/mnt/data/chat_history.json";
const HISTORY_TTL_MS = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤

if (!fs.existsSync(HISTORY_FILE)) {
  fs.writeFileSync(HISTORY_FILE, "{}");
  console.log("üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω –Ω–∞ –¥–∏—Å–∫–µ Render (/mnt/data)");
}

const recentGreetings = {}; // key: ticket_id, value: timestamp

function buildExtendedPrompt(faq, userMessage, history = []) {
  let block = "üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤:\n";
  if (Array.isArray(faq)) {
    faq.forEach((item) => {
      block += "Q: " + item.question + "\nA: " + item.answer + "\n\n";
      if (item.aliases && item.aliases.length > 0) {
        item.aliases.forEach((alias) => {
          block += "Q: " + alias + "\nA: " + item.answer + "\n\n";
        });
      }
    });
  }
  const chatHistory = history.length > 0 ? `\n–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n${history.map(h => h.text).join("\n")}` : "";
  block += `${chatHistory}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: \"${userMessage}\"\n–û—Ç–≤–µ—Ç:`;
  return block;
}

async function getChatHistory(chatId) {
  let data = {};
  try {
    const file = await fsp.readFile(HISTORY_FILE, "utf-8");
    data = JSON.parse(file);
  } catch (_) {}
  const now = Date.now();
  const history = (data[chatId] || []).filter(entry => now - entry.timestamp < HISTORY_TTL_MS);
  data[chatId] = history;
  await fsp.writeFile(HISTORY_FILE, JSON.stringify(data, null, 2));
  return history.map(entry => entry.text);
}

async function appendToHistory(chatId, message) {
  let data = {};
  try {
    const file = await fsp.readFile(HISTORY_FILE, "utf-8");
    data = JSON.parse(file);
  } catch (_) {}
  if (!data[chatId]) data[chatId] = [];
  data[chatId].push({ text: message, timestamp: Date.now() });
  if (data[chatId].length > 10) {
    data[chatId] = data[chatId].slice(-10);
  }
  await fsp.writeFile(HISTORY_FILE, JSON.stringify(data, null, 2));
  console.log(`üíæ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: [${chatId}] ‚Üí ${message}`);
}

function isAskingClarification(answer) {
  const clarifiers = [
    "—É—Ç–æ—á–Ω–∏—Ç–µ",
    "—á—Ç–æ –∏–º–µ–Ω–Ω–æ",
    "–º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å",
    "–Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª",
    "—É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
    "–º–æ–≥–ª–∏ –±—ã –ø–æ—è—Å–Ω–∏—Ç—å",
    "—á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å",
    "–∫–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å",
    "—á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
    "–æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
    "–Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
    "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
  ];
  return clarifiers.some(word => answer.toLowerCase().includes(word));
}

async function updateTicketStatus(ticketId, status, clientName) {
  try {
    const response = await fetch("https://api.usedesk.ru/update/ticket", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        api_token: USEDESK_API_TOKEN,
        ticket_id: ticketId,
        status: String(status)
      })
    });
    await response.json();
    console.log(`üéØ –ö–ª–∏–µ–Ω—Ç: ${clientName} | –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #${ticketId} ‚Üí ${status}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞:", err);
  }
}

app.post("/", async (req, res) => {
  const data = req.body;
  if (!data || !data.text || data.from !== "client") return res.sendStatus(200);
  
  const chat_id = data.chat_id;
  const message = data.text;
  const normalizedText = message.toLowerCase();
  const wantsManager = ["–º–µ–Ω–µ–¥–∂–µ—Ä", "–ø–µ—Ä–µ–∫–ª—é—á–∏", "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "–ø–æ–∑–æ–≤–∏"].some(trigger =>
    normalizedText.includes(trigger)
  );
  const ticket_id = data.ticket?.id;
  const ticket_status = data.ticket?.status_id;
  const client_id = data.client?.id;
  const client_name = data.client?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  console.log("üöÄ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);

  await appendToHistory(chat_id, `–ö–ª–∏–µ–Ω—Ç: ${message}`);
  const history = await getChatHistory(chat_id);

  const systemPrompt = `–¢—ã ‚Äî –∞–≥–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ Payda –≠–î–û. –û—Ç–≤–µ—á–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å. –ù–∏–∂–µ ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
  –¢—ã –∞–≥–µ–Ω—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ Payda –≠–î–û. –û—Ç–≤–µ—á–∞–π –∫–ª–∏–µ–Ω—Ç–∞–º –≤–µ–∂–ª–∏–≤–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, —Å –ª—ë–≥–∫–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤, –Ω–µ —É—Ö–æ–¥–∏ –≤ –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ –ø–æ –∞–¥—Ä–µ—Å—É.

–í–æ—Ç —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:
1. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å Payda –≠–î–û –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω:
   ‚Äî –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ
   ‚Äî –ù–∞–ø–∏—Å–∞—Ç—å: ¬´–•–æ—á—É –ø–µ—Ä–µ–π—Ç–∏ –≤ Payda –≠–î–û¬ª
   ‚Äî –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ò–ò–ù
   ‚Äî –î–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
2. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:
   ‚Äî –î–æ–∫—É–º–µ–Ω—Ç—ã (–ê–í–† –∏ –≠–°–§) –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ https://taxi.edo.kz —Å 8 –ø–æ 15 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞. –ú—ã –µ—â—ë –æ—Ç–ø—Ä–∞–≤–∏–º —Å–º—Å –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è. 
   ‚Äî –ü–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ Kaspi¬ª
   ‚Äî –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ ‚Äî 500 —Ç–≥/–º–µ—Å
   ‚Äî –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–∞—Ä–∫–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ
3. –î–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ eGov Mobile –∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ò–° –≠–°–§. –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –Ø–Ω–¥–µ–∫—Å –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—ã–≤–æ–¥ –±–æ–Ω—É—Å–æ–≤.
4. –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –ø—Ä–∏—à–ª–∏:
   ‚Äî –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –∏ —É—Ç–æ—á–Ω–∏—Ç—å, –∫—Ç–æ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
   ‚Äî Payda –≠–î–û –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∞—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ
5. –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã:
   ‚Äî –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –Ω–æ–º–µ—Ä ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   ‚Äî –ï—Å–ª–∏ —Å–∞–π—Ç –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Wi-Fi –∏–ª–∏ –º–æ–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   ‚Äî –£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   ‚Äî –ú—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º —Å –Ø–Ω–¥–µ–∫—Å–æ–º (–µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–∞ –∏—Ö —Å–∞–π—Ç–µ)
   ‚Äî –†–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –†–µ—Å–ø—É–±–ª–∏–∫–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
   –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ ‚Äî –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ –∞–¥—Ä–µ—Å—É ‚Äî –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å –∫–ª–∏–µ–Ω—Ç–∞. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –±—É–¥—å –ø–æ–ª–µ–∑–µ–Ω —Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
`;
  const fullPrompt = systemPrompt + "\n\n" + buildExtendedPrompt(faq, message, history);

  let aiAnswer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç üòÖ";
  let isUnrecognized = false;

  try {
    const geminiRes = await fetch(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + GEMINI_API_KEY,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents: [{ role: "user", parts: [{ text: fullPrompt }] }] })
      }
    );
    const geminiData = await geminiRes.json();
    aiAnswer = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || aiAnswer;

    const lastGreet = recentGreetings[ticket_id];
    const now = Date.now();
    if (aiAnswer.toLowerCase().startsWith("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ") && lastGreet && now - lastGreet < 86400000) {
      aiAnswer = aiAnswer.replace(/^–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ[!,.\s]*/i, "").trimStart();
    } else if (aiAnswer.toLowerCase().startsWith("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ")) {
      recentGreetings[ticket_id] = now;
    }

    console.log("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç Gemini:", aiAnswer);

    if (isUnrecognizedResponse(aiAnswer) || wantsManager) {
      isUnrecognized = true;
      logUnanswered(message, data.client_id);
      aiAnswer = "–ö —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ üôå";

      await fetch("https://api.usedesk.ru/chat/changeAssignee", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          api_token: USEDESK_API_TOKEN,
          chat_id,
          user_id: USEDESK_USER_ID
        })
      });
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Gemini:", err);
  }

  if (ticket_status === 3) {
    return res.sendStatus(200);
  }

  try {
    await fetch("https://api.usedesk.ru/chat/sendMessage", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        api_token: USEDESK_API_TOKEN,
        chat_id,
        user_id: USEDESK_USER_ID,
        text: aiAnswer
      })
    });
    await appendToHistory(chat_id, `–ê–≥–µ–Ω—Ç: ${aiAnswer}`);
    console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Usedesk:", err);
  }

  if (ticket_id && !isUnrecognized) {
    const status = isAskingClarification(aiAnswer) ? 6 : 2;
    await updateTicketStatus(ticket_id, status, client_name);
  }

  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Å –ò–ò –∏ Render-–¥–∏—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω üöÄ (–ø–æ—Ä—Ç ${PORT})`);
});
