
import fs from "fs";

const path = "/tmp/unanswered_questions.json"; // –ø—É—Ç—å –¥–ª—è Render

export function isUnrecognizedResponse(text) {
  const lowered = text.toLowerCase();
  return (
    lowered.includes("–Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç–∞") ||
    lowered.includes("–Ω–µ –∑–Ω–∞—é") ||
    lowered.includes("–Ω–µ –ø–æ–Ω–∏–º–∞—é") ||
    lowered.includes("–Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å") ||
    lowered.includes("–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å") ||
    lowered.includes("–æ–ø–µ—Ä–∞—Ç–æ—Ä") ||
    lowered.includes("–≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏") ||
    lowered.includes("–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç") ||
    lowered.includes("–Ω–µ –æ–±–ª–∞–¥–∞—é") ||
    text.trim().length < 10
  );
}

export function logUnanswered(question, clientId = null) {
  const entry = {
    question,
    clientId,
    timestamp: new Date().toISOString()
  };

  let log = [];
  if (fs.existsSync(path)) {
    try {
      log = JSON.parse(fs.readFileSync(path, "utf8"));
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", e.message);
    }
  }

  log.push(entry);
  fs.writeFileSync(path, JSON.stringify(log, null, 2));
  console.log("üìù –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥-—Ñ–∞–π–ª:", path);
}
