// index.js
import express from "express";
import fetch from "node-fetch";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import faqList from "./faq.js";
import Fuse from "fuse.js";

dotenv.config();

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 10000;
const USEDESK_API_TOKEN = process.env.USEDESK_API_TOKEN;
const USEDESK_USER_ID = process.env.USEDESK_USER_ID;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TEST_CLIENT_ID = "175888649"; // ะขะพะปัะบะพ ััะพั ะบะปะธะตะฝั ะฟะพะปััะฐะตั ะพัะฒะตัั

console.log("\n\u{1F9EA} ะะตัะตะผะตะฝะฝัะต ะพะบััะถะตะฝะธั:");
console.log("USEDESK_API_TOKEN:", USEDESK_API_TOKEN ? "โ" : "โ NOT SET");
console.log("USEDESK_USER_ID:", USEDESK_USER_ID ? "โ" : "โ NOT SET");
console.log("GEMINI_API_KEY:", GEMINI_API_KEY ? "โ" : "โ NOT SET");

// ะะฐัััะฐะธะฒะฐะตะผ Fuse.js
const fuse = new Fuse(faqList, {
  keys: ["question", "aliases"],
  threshold: 0.4,
  ignoreLocation: true,
  includeScore: true
});

app.post("/", async (req, res) => {
  const data = req.body;

  if (!data || !data.text || data.from !== "client" || `${data.client_id}` !== TEST_CLIENT_ID) {
    console.log("\u26A0\uFE0F ะัะพะฟััะตะฝะพ: ะฝะต ัะพะพะฑัะตะฝะธะต ะพั ะบะปะธะตะฝัะฐ ะธะปะธ ะฝะต ะฝะฐั client_id");
    return res.sendStatus(200);
  }

  const chat_id = data.chat_id;
  const message = data.text;
  const client_id = data.client_id;

  console.log("\u{1F680} ะะพะปััะตะฝะพ ัะพะพะฑัะตะฝะธะต:", message);

  // ะัะตะผ ะฒ ะปะพะบะฐะปัะฝะพะน ะฑะฐะทะต
  const result = fuse.search(message.toLowerCase());
  let answer = result?.[0]?.item?.answer || null;

  if (answer) {
    console.log("\u{1F4DA} ะัะฒะตั ะฝะฐะนะดะตะฝ ะฒ FAQ:", answer);
  } else {
    // ะะฝะฐัะต ัะฟัะฐัะธะฒะฐะตะผ ั Gemini
    const prompt = `ะขั ัะฐั-ะฑะพั ัะปัะถะฑั ะฟะพะดะดะตัะถะบะธ. ะัะฒะตัะฐะน ะบัะฐัะบะพ, ะฒะตะถะปะธะฒะพ ะธ ะฟะพ ะดะตะปั. ะัะปะธ ะฝะต ะทะฝะฐะตัั โ ะฟัะตะดะปะพะถะธ ะพะฑัะฐัะธัััั ะบ ะพะฟะตัะฐัะพัั.\n\nะะปะธะตะฝั: ${message}`;
    answer = "ะะทะฒะธะฝะธัะต, ั ะฝะต ะฟะพะฝะธะผะฐั ะฒะฐั ะทะฐะฟัะพั.  ะะปั ััะพัะฝะตะฝะธั, ะฟะพะถะฐะปัะนััะฐ, ะพะฑัะฐัะธัะตัั ะบ ะพะฟะตัะฐัะพัั.";

    try {
      const geminiRes = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              { role: "user", parts: [{ text: prompt }] }
            ]
          })
        }
      );

      const geminiData = await geminiRes.json();
      answer = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || answer;
      console.log("\u2705 ะัะฒะตั ะพั Gemini:", answer);
    } catch (error) {
      console.error("\u274C ะัะธะฑะบะฐ ะทะฐะฟัะพัะฐ ะบ Gemini:", error);
    }
  }

  // ะัะฟัะฐะฒะปัะตะผ ะพัะฒะตั ะบะปะธะตะฝัั
  try {
    const response = await fetch("https://api.usedesk.ru/chat/sendMessage", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        api_token: USEDESK_API_TOKEN,
        chat_id,
        user_id: USEDESK_USER_ID,
        text: answer
      })
    });

    const result = await response.json();
    console.log("\u2705 ะัะฒะตั ะพัะฟัะฐะฒะปะตะฝ ะบะปะธะตะฝัั:", result);
  } catch (error) {
    console.error("\u274C ะัะธะฑะบะฐ ะพัะฟัะฐะฒะบะธ ะฒ Usedesk:", error);
  }

  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`โ ะกะตัะฒะตั ั ะะ ะฟะพะดะบะปััะตะฝ ะธ ัะปััะฐะตั ๐ (ะฟะพัั ${PORT})`);
});
